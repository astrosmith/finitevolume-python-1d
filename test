import matplotlib.pyplot as plt
import numpy as np
from plot_utils import plot_snap

"""
Create Your Own Finite Volume Fluid Simulation (With Python)
Philip Mocz (2020) Princeton Univeristy, @PMocz

Simulate the Kelvin Helmholtz Instability
In the compressible Euler equations

"""


def getConserved( rho, vx, P, gamma, vol ):
	"""
    Calculate the conserved variable from the primitive
	rho      is matrix of cell densities
	vx       is matrix of cell x-velocity
	P        is matrix of cell pressures
	gamma    is ideal gas gamma
	vol      is cell volume
	Mass     is matrix of mass in cells
	Momx     is matrix of x-momentum in cells
	     is matrix of y-momentum in cells
	Energy   is matrix of energy in cells
	"""
	Mass   = rho * vol
	Momx   = rho * vx * vol
	Energy = (P/(gamma-1) + 0.5*rho*(vx**2))*vol
	
	return Mass, Momx, Energy


def getPrimitive( Mass, Momx, Energy, gamma, vol ):
	"""
    Calculate the primitive variable from the conservative
	Mass     is matrix of mass in cells
	Momx     is matrix of x-momentum in cells
	Energy   is matrix of energy in cells
	gamma    is ideal gas gamma
	vol      is cell volume
	rho      is matrix of cell densities
	vx       is matrix of cell x-velocity
	P        is matrix of cell pressures
	"""
	rho = Mass / vol
	vx  = Momx / rho / vol
	P   = (Energy/vol - 0.5*rho * (vx**2)) * (gamma-1)
	
	return rho, vx, P


def getGradient(f, dx):
	"""
    Calculate the gradients of a field
	f        is a matrix of the field
	dx       is the cell size
	f_dx     is a matrix of derivative of f in the x-direction
	"""
	# directions for np.roll() 
	R = -1   # right
	L = 1    # left
	f_dx = np.empty_like(f)
	f_dx[1:-1] = (f[2:] - f[:-2]) / (2*dx)
	f_dx[0] = (f[1] - f[0]) / dx
	f_dx[-1] = (f[-1] - f[-2]) / dx
	#f_dx = ( np.roll(f,R,axis=0) - np.roll(f,L,axis=0) ) / (2*dx)
	
	return f_dx


def slopeLimit(f, dx, f_dx):
	"""
    Apply slope limiter to slopes
	f        is a matrix of the field
	dx       is the cell size
	f_dx     is a matrix of derivative of f in the x-direction
	"""
	# directions for np.roll() 
	R = -1   # right
	L = 1    # left
	
	f_dx = np.maximum(0., np.minimum(1., ( (f-np.roll(f,L,axis=0))/dx)/(f_dx + 1.0e-8*(f_dx==0)))) * f_dx
	f_dx = np.maximum(0., np.minimum(1., (-(f-np.roll(f,R,axis=0))/dx)/(f_dx + 1.0e-8*(f_dx==0)))) * f_dx
	
	return f_dx


def extrapolateInSpaceToFace(f, f_dx, dx):
	"""
    Calculate the gradients of a field
	f        is a matrix of the field
	f_dx     is a matrix of the field x-derivatives
	dx       is the cell size
	f_XL     is a matrix of spatial-extrapolated values on `left' face along x-axis 
	f_XR     is a matrix of spatial-extrapolated values on `right' face along x-axis 
	f_YL     is a matrix of spatial-extrapolated values on `left' face along y-axis 
	f_YR     is a matrix of spatial-extrapolated values on `right' face along y-axis 
	"""
	# directions for np.roll() 
	R = -1   # right
	L = 1    # left
	
	f_XL = f - f_dx * dx/2
	f_XL = np.roll(f_XL,R,axis=0)
	f_XR = f + f_dx * dx/2
	
	
	return f_XL, f_XR
	

def applyFluxes(F, flux_F_X, dx, dt):
	"""
    Apply fluxes to conserved variables
	F        is a matrix of the conserved variable field
	flux_F_X is a matrix of the x-dir fluxes
	dx       is the cell size
	dt       is the timestep
	"""
	# directions for np.roll() 
	R = -1   # right
	L = 1    # left
	
	# update solution
	F += - dt * flux_F_X
	F +=   dt * np.roll(flux_F_X,L,axis=0)
	
	return F


def getFlux(rho_L, rho_R, vx_L, vx_R, P_L, P_R, gamma):
	"""
    Calculate fluxed between 2 states with local Lax-Friedrichs/Rusanov rule 
	rho_L        is a matrix of left-state  density
	rho_R        is a matrix of right-state density
	vx_L         is a matrix of left-state  x-velocity
	vx_R         is a matrix of right-state x-velocity
	P_L          is a matrix of left-state  pressure
	P_R          is a matrix of right-state pressure
	gamma        is the ideal gas gamma
	flux_Mass    is the matrix of mass fluxes
	flux_Momx    is the matrix of x-momentum fluxes
	flux_    is the matrix of y-momentum fluxes
	flux_Energy  is the matrix of energy fluxes
	"""
	
	# left and right energies
	en_L = P_L/(gamma-1)+0.5*rho_L * (vx_L**2)
	en_R = P_R/(gamma-1)+0.5*rho_R * (vx_R**2)

	# compute star (averaged) states
	rho_star  = 0.5*(rho_L + rho_R)
	momx_star = 0.5*(rho_L * vx_L + rho_R * vx_R)
	en_star   = 0.5*(en_L + en_R)
	
	P_star = (gamma-1)*(en_star-0.5*(momx_star**2)/rho_star)
	
	# compute fluxes (local Lax-Friedrichs/Rusanov)
	flux_Mass   = momx_star
	flux_Momx   = momx_star**2/rho_star + P_star
	flux_Energy = (en_star+P_star) * momx_star/rho_star
	
	# find wavespeeds
	C_L = np.sqrt(gamma*P_L/rho_L) + np.abs(vx_L)
	C_R = np.sqrt(gamma*P_R/rho_R) + np.abs(vx_R)
	C = np.maximum( C_L, C_R )
	
	# add stabilizing diffusive term
	flux_Mass   -= C * 0.5 * (rho_L - rho_R)
	flux_Momx   -= C * 0.5 * (rho_L * vx_L - rho_R * vx_R)
	flux_Energy -= C * 0.5 * ( en_L - en_R )

	return flux_Mass, flux_Momx, flux_Energy




def main():
	""" Finite Volume simulation """
	
	# Simulation parameters
	N                      = 128 # resolution
	boxsize                = 1.
	gamma                  = 5/3 # ideal gas gamma
	courant_fac            = 0.4
	t                      = 0
	tEnd                   = 2
	tOut                   = 0.02 # draw frequency
	useSlopeLimiting       = False
	plotRealTime = False # switch on for plotting as the simulation goes along
	
	# Mesh
	dx = boxsize / N
	vol = dx**2
	xlin = np.linspace(0.5*dx, boxsize-0.5*dx, N)
	X = np.meshgrid( xlin )
	
	# Generate Initial Conditions - opposite moving streams with perturbation
	rho_XL, P_XL, vx_XL = 1.,1.,0
	rho_XR, P_XR, vx_XR = .125,.1,0
	mask = xlin > 0.5
	rho = np.empty(N); rho[~mask] = rho_XL; rho[mask] = rho_XR
	P = np.empty(N); P[~mask] = P_XL; P[mask] = P_XR
	vx = np.empty(N); vx[~mask] = vx_XL; vx[mask] = vx_XR 
	# w0 = 0.1
	# sigma = 0.05/np.sqrt(2.)
	# rho = 1. + (np.abs(Y-0.5) < 0.25)
	# vx = -0.5 + (np.abs(Y-0.5)<0.25)
	# P = 2.5 * np.ones(X.shape)


	# Get conserved variables
	Mass, Momx, Energy = getConserved( rho, vx, P, gamma, vol )
	
	# prep figure
	fig = plt.figure(figsize=(4,4), dpi=80)
	outputCount = 2
	
	# Simulation Main Loop
	while t < tEnd:
		
		# get Primitive variables
		rho, vx, P = getPrimitive( Mass, Momx, Energy, gamma, vol )
		
		# get time step (CFL) = dx / max signal speed
		dt = courant_fac * np.min( dx / (np.sqrt( gamma*P/rho ) + np.abs(vx)) )
		plotThisTurn = False
		if t + dt > outputCount*tOut:
			dt = outputCount*tOut - t
			plotThisTurn = True
		
		# calculate gradients
		rho_dx = getGradient(rho, dx)
		vx_dx = getGradient(vx,  dx)
		P_dx = getGradient(P,   dx)
		
		# slope limit gradients
		if useSlopeLimiting:
			rho_dx = slopeLimit(rho, dx, rho_dx)
			vx_dx = slopeLimit(vx , dx, vx_dx)
			P_dx  = slopeLimit(P  , dx, P_dx)
		
		# extrapolate half-step in time
		rho_prime = rho - 0.5*dt * ( vx * rho_dx + rho * vx_dx )
		vx_prime  = vx  - 0.5*dt * ( vx * vx_dx + (1/rho) * P_dx )
		P_prime   = P   - 0.5*dt * ( gamma*P * (vx_dx)  + vx * P_dx )
		
		# extrapolate in space to face centers
		rho_XL, rho_XR = extrapolateInSpaceToFace(rho_prime, rho_dx, dx)
		vx_XL,  vx_XR = extrapolateInSpaceToFace(vx_prime,  vx_dx, dx)
		P_XL,   P_XR  = extrapolateInSpaceToFace(P_prime,   P_dx, dx)
		
		# compute fluxes (local Lax-Friedrichs/Rusanov)
		flux_Mass_X, flux_Momx_X, flux_Energy_X = getFlux(rho_XL, rho_XR, vx_XL, vx_XR, P_XL, P_XR, gamma)
		
		# update solution
		Mass   = applyFluxes(Mass, flux_Mass_X, dx, dt)
		Momx   = applyFluxes(Momx, flux_Momx_X, dx, dt)
		Energy = applyFluxes(Energy, flux_Energy_X, dx, dt)
		
		# update time
		t += dt
		
		# plot in real time
		if (plotRealTime and plotThisTurn) or (t >= tEnd):
			print(xlin)
			print(rho)
			plot_snap(gamma=gamma, t=t, xlin=xlin, rho=rho, p=P, u=vx, num=outputCount)
            # plt.cla()
			# plt.imshow(rho.T)
			# plt.clim(0.8, 2.2)
			# ax = plt.gca()
			# ax.invert_yaxis()
			# ax.get_xaxis().set_visible(False)
			# ax.get_yaxis().set_visible(False)	
			# ax.set_aspect('equal')	
			# plt.pause(0.001)
			# outputCount += 1
			
	
	# Save figure
	# plt.savefig('finitevolume.png',dpi=240)
	# plt.show()
	    
	return 0



if __name__== "__main__":
  main()
